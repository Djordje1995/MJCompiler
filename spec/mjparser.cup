package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, MINUS, EQUAL, VOID, IF, ELSE, INC, DEC;
terminal MUL, DIV, MOD, NEQUAL, GREATER, GREATERE, LESSER, LESSERE, ASSIGN, DOT, LSQUAREB, RSQUAREB, NEW, OR, AND;
terminal READ, BREAK, CONTINUE, FOR, INTERFACE, EXTENDS, CLASS, IMPLEMENTS, ENUM, CONST;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;

nonterminal MaybeAssignNumConst, EnumDecl, AnyConst, IdentConstList, ConstDecl, DeclarationList;  
nonterminal MaybeExtends, ClassDecl, MaybeMethodDecl, MaybeImplements, TypeList, DesignatorStatementOp;
nonterminal MethodDeclList, VarDecl, MaybeFormPars, InterfaceMethodDecl, InterfaceMethodDeclList, InterfaceDecl;
nonterminal FormParsList, MaybeEmptySquareBrackets, FormPars, ActPars, ActParList, MaybeExpression; 
nonterminal DesignatorStatement, StatementList, Statement, Addop, Mulop, Relop, Assignop, FormalParam;
nonterminal MaybeNumConst, ReturnExpression, MaybeCondition, MaybeDesignatorStatement, IdentConst;
nonterminal MulopFactorList, AddopTermList, CondFact, CondFactAnd, CondTerm, CondTermOr, Condition;
nonterminal MaybeActualParams, MaybeParams, MaybeMinus, MaybeRelopExpr, TypeOrVoid, Matched, Unmatched;
nonterminal EnumParamList, EnumParam, EnumName, Declaration, VarName, VarList, MethodStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, MethodDecl, MethodName, Designator; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

Program ::= (Program) PROGRAM ProgName:name DeclarationList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;  

DeclarationList ::= (DeclarationsList) DeclarationList Declaration
                  |
                  (NoDeclaration) /* epsilon */
                  ;

Declaration ::= (ConstDeclaration) ConstDecl
					|
					(VarDeclaration) VarDecl
					|
					(ClassDeclaration) ClassDecl
					|
					(EnumDeclaration) EnumDecl
					|
					(InterfaceDeclaration) InterfaceDecl
					; 

ConstDecl ::= (ConstDecl) CONST Type:t  IdentConst IdentConstList SEMI;

IdentConst ::= (IdentConst) IDENT:name ASSIGN AnyConst;

IdentConstList ::= (IdentConstListRec) IdentConstList COMMA IdentConst
				        |
				        (IdentConstListError) error
				        {: System.out.println("Uspesan oporavak od greske (do prvog znaka ';') prilikom definisanja konstante"); :}
				        COMMA IdentConst
				        |
				        /* epsilon */
			 	        ;

AnyConst ::= (NumConst) NUM_CONST:numValue
			|
			(CharConst) CHAR_CONST:charValue
			|
			(BoolConst) BOOL_CONST:boolValue
			;

EnumDecl ::= (EnumDecl) EnumName:name LBRACE EnumParam EnumParamList RBRACE;

EnumName ::= (EnumName) ENUM IDENT:enumName;

EnumParam ::= (EnumParam) IDENT:name MaybeAssignNumConst;

EnumParamList ::= (EnumParamsList) EnumParamList COMMA EnumParam
                  |
                  (EnumParamListError) error
                  {: System.out.println("Uspesan oporavak od greske (do prvog znaka ',') prilikom definisanja nabrojivog tipa"); :}
                  COMMA EnumParam
                  |
                  (NoEnumParamsList) /* epsilon */
                  ; 

MaybeAssignNumConst ::= (EnumAssignNumConst) ASSIGN NUM_CONST:value
				              |
				              /* epsilon */
				              ;

VarDecl ::= (VarDcl) Type:t VarName:name VarList SEMI
          |
          (VarDeclError) error
          {: System.out.println("Uspesan oporavak od greske (do prvog znaka ';') prilikom deklarisanja promenljive"); :}
          SEMI
          ;

VarName ::= (VarName) IDENT:varName MaybeEmptySquareBrackets;

VarList ::= (VarListRec) VarList COMMA VarName:name
        |
        (VarListError) error
        {: System.out.println("Uspesan oporavak od greske (do prvog znaka ',') prilikom deklarisanja promenljive"); :}
        COMMA VarName:name
				|
				/* epsilon */
				;

ClassDecl ::= (ClassDecl) CLASS IDENT MaybeExtends MaybeImplements LBRACE VarDeclList MaybeMethodDecl RBRACE;

MaybeMethodDecl ::= LBRACE MethodDeclList RBRACE

					|
					/* epsilon */
					;

MethodDeclList ::= (MethodDeclListRec) MethodDeclList MethodDecl
					|
					/* epsilon */
					;

MaybeImplements ::= IMPLEMENTS Type:t TypeList
					|
					/* epsilon */
					;

TypeList ::= (TypeListRec) TypeList COMMA Type:t
				  |
				  /* epsilon */
				  ;

MaybeExtends ::= EXTENDS Type:t
				|
				/* epsilon */
				;

InterfaceDecl ::= (InterfaceDecl) INTERFACE IDENT LBRACE InterfaceMethodDeclList RBRACE;

InterfaceMethodDeclList ::= (InterfaceMethodDeclListRec) InterfaceMethodDeclList InterfaceMethodDecl
							|
							/* epsilon */
							;

InterfaceMethodDecl ::= (InterfaceMethodDecl) TypeOrVoid IDENT LPAREN MaybeFormPars RPAREN SEMI;

MethodDecl ::= (MethodDecl) MethodName LPAREN MaybeFormPars RPAREN VarDeclList LBRACE MethodStart StatementList RBRACE;

MethodStart ::= (MethodStart) /* epsilon */;

MethodName ::= (MethodName) TypeOrVoid IDENT:methodName;

TypeOrVoid ::= (SomeType) Type:typeName
				      |
				      (VoidType) VOID
				      ; 

MaybeFormPars ::= (FormParams) FormPars:fp 
				      |
				      (NoFormParams) /* epsilon */
				      ;

VarDeclList ::= (VarDeclListRec) VarDeclList VarDecl:var
      				|
      				/* epsilon */
      				; 

FormPars ::= (FormPars) FormalParam FormParsList:l;

FormalParam ::= (FormalParam) Type:t IDENT MaybeEmptySquareBrackets;

MaybeEmptySquareBrackets ::= (EmptySquareBrackets) LSQUAREB RSQUAREB
          							|
          							(NoSquareBrackets) /* epsilon */
          							;			

FormParsList ::= (FormParsListRec) FormParsList COMMA FormalParam
      				|
      				/* epsilon */
      				;

Type ::= (Type) IDENT:typeName;

Statement ::= (MatchedStmt) Matched
    			  |
    			  (UnmatchedStmt) Unmatched
    			  ;

Unmatched ::= (UnmatchedIf) IF LPAREN Condition:cond RPAREN Statement:stmt
			|
			(UnmatchedIfElse) IF LPAREN Condition:cond RPAREN Matched ELSE Unmatched;
	
Matched ::=
			(DesignStatement) DesignatorStatement:designatorStatement SEMI
			|
			(MatchedError) error
			{: System.out.println("Uspesan oporavak od greske (do prvog znaka ';') prilikom izvrsavanja izraza"); :}
			SEMI
			|
			(MatchedIf) IF LPAREN Condition:cond RPAREN Matched ELSE Matched
			|
			(ForStatement) FOR LPAREN MaybeDesignatorStatement SEMI MaybeCondition SEMI MaybeDesignatorStatement RPAREN Matched:stmt
			|
			(Break) BREAK SEMI
			|
			(Continue) CONTINUE SEMI
			|
			(ReturnStatement) RETURN ReturnExpression SEMI
			|
			(ReadDesignatorStatement) READ LPAREN Designator:designator RPAREN SEMI
			|
			(PrintStatement) PRINT LPAREN Expr:expr MaybeNumConst RPAREN SEMI
			|
			(StatementBody) LBRACE StatementList RBRACE
			;
			
StatementList ::= (StatementListRec) StatementList Statement:stmt
				|
				/* epsilon */
				;
			
MaybeNumConst ::= (IsNumConst) COMMA NUM_CONST
				        |
				        (NoNumConst) /* epsilon */
				        ;			

ReturnExpression ::= (ReturnExpressionE) Expr:e
					         |
					         (NoReturnExpression) /* epsilon */
					         ;
					 
			
MaybeCondition ::= Condition:cond
					|
					/* epsilon */
					;
			
MaybeDesignatorStatement ::= DesignatorStatement:stmt
							|
							/* epsilon */
							;			

DesignatorStatement ::= (DesignatorStatement) Designator DesignatorStatementOp;

DesignatorStatementOp ::= 
            (DesignatorExpr) Assignop Expr:e
						|
						(DesignatorParams) LPAREN MaybeActualParams RPAREN
						|
						(DesignatorInc) INC
						|
						(DesignatorDec) DEC
						;

ActPars ::= (ActPars) Expr:e ActParList;

ActParList ::= (ActParListRec) ActParList COMMA Expr:e
				|
				/* epsilon */
				;
				
Condition ::= (Condition) CondTerm:ct CondTermOr;

CondTermOr ::= (CondTermOrRec) CondTermOr OR CondTerm
				|
				/* epsilon */
				;

CondTerm ::= (CondTerm) CondFact:cf CondFactAnd;

CondFactAnd ::= (CondFactAndRec) CondFactAnd AND CondFact
				|
				/* epsilon */
				;

CondFact ::= (CondFact) Expr:e MaybeRelopExpr; 
			
MaybeRelopExpr ::= Relop Expr:e
				|
				/* epsilon */
				;
				
Expr ::= (Expr) MaybeMinus Term:t AddopTermList;

MaybeMinus ::=  (IsMinus) MINUS
				|
				/* epsilon */
				;

AddopTermList ::= (AddopTermListRec) AddopTermList Addop Term:t
				|
				/* epsilon */
				;

Term ::= (Term) Factor:f MulopFactorList;

MulopFactorList ::= (MulopFactorListRec) MulopFactorList Mulop Factor:f 
				           |
				           /* epsilon */
				           ;

Factor ::= (FactorDesignator) Designator:d MaybeParams
          |
          (FactorNumber) NUM_CONST
          |
          (FactorChar) CHAR_CONST
          |
          (FactorBool) BOOL_CONST
          |
          (FactorNewType) NEW Type:type MaybeExpression
          |
          (FactorExpression) LPAREN Expr:e RPAREN
          ;

MaybeParams ::= (ActualParamsBrackets) LPAREN MaybeActualParams:params RPAREN
				      |
				      /* epsilon */
				      ;
				
MaybeActualParams ::= (ActualParams) ActPars:params
						|
						/* epsilon */
						;
				
MaybeExpression ::= (IsExpression) LSQUAREB Expr:e RSQUAREB
        					|
        					(NoExpression)/* epsilon */
        					;

Designator ::= (DesignatorRefMember) Designator DOT IDENT
				|
				(DesignatorArrayMember) Designator LSQUAREB Expr:e RSQUAREB
				|
				(DesignatorIdent) IDENT:name
				;

Assignop ::= (Assign) ASSIGN;

Relop ::= (Equal) EQUAL
		|
		(NotEqual) NEQUAL
		|
		(Greater) GREATER
		|
		(GreaterOrEqual) GREATERE
		|
		(Lesser) LESSER
		|
		(LesserOrEqual) LESSERE
		;

Addop ::= (Plus) PLUS 
		|
		(Minus) MINUS
		;

Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;
		