package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, MINUS, EQUAL, VOID, IF, ELSE, INC, DEC;
terminal MUL, DIV, MOD, NEQUAL, GREATER, GREATERE, LESSER, LESSERE, ASSIGN, DOT, LSQUAREB, RSQUAREB, NEW, OR, AND;
terminal READ, BREAK, CONTINUE, FOR, INTERFACE, EXTENDS, CLASS, IMPLEMENTS, ENUM, CONST;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;

nonterminal MaybeAssignNumConst MaybeAssignNumConst;
nonterminal EnumDecl EnumDecl;
nonterminal AnyConst AnyConst;
nonterminal IdentConstList IdentConstList;
nonterminal ConstDecl ConstDecl;
nonterminal DeclarationList DeclarationList;  
nonterminal MaybeExtends MaybeExtends;
nonterminal ClassDecl ClassDecl;
nonterminal MaybeMethodDecl MaybeMethodDecl;
nonterminal MaybeImplements MaybeImplements;
nonterminal TypeList TypeList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal MaybeFormPars MaybeFormPars;
nonterminal InterfaceMethodDecl InterfaceMethodDecl;
nonterminal InterfaceMethodDeclList InterfaceMethodDeclList;
nonterminal InterfaceDecl InterfaceDecl;
nonterminal FormParsList FormParsList;
nonterminal MaybeEmptySquareBrackets MaybeEmptySquareBrackets;
nonterminal FormPars FormPars;
nonterminal ActPars ActPars;
nonterminal ActParList ActParList;
nonterminal MaybeExpression MaybeExpression; 
nonterminal DesignatorStatement DesignatorStatement;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Relop Relop;
nonterminal Assignop Assignop;
nonterminal MaybeNumConst MaybeNumConst;
nonterminal ReturnExpression ReturnExpression;
nonterminal MaybeCondition MaybeCondition;
nonterminal MaybeDesignatorStatement MaybeDesignatorStatement;
nonterminal IdentConst IdentConst;
nonterminal MulopFactorList MulopFactorList;
nonterminal AddopTermList AddopTermList;
nonterminal CondFact CondFact;
nonterminal CondFactAnd CondFactAnd;
nonterminal CondTerm CondTerm;
nonterminal CondTermOr CondTermOr;
nonterminal Condition Condition;
nonterminal MaybeActualParams MaybeActualParams;
nonterminal MaybeParams MaybeParams;
nonterminal MaybeMinus MaybeMinus;
nonterminal MaybeRelopExpr MaybeRelopExpr;
nonterminal TypeOrVoid TypeOrVoid;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal EnumParamList EnumParamList;
nonterminal EnumParam EnumParam;
nonterminal EnumName EnumName;
nonterminal Declaration Declaration;
nonterminal VarName VarName;
nonterminal VarList VarList;
nonterminal MethodStart MethodStart;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, MethodDecl, MethodName, Designator; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

Program ::= (Program) PROGRAM ProgName:name DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(name, D1, M2); RESULT.setLine(nameleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};  

DeclarationList ::= (DeclarationsList) DeclarationList:D1 Declaration:D2 {: RESULT=new DeclarationsList(D1, D2); RESULT.setLine(D1left); :}
                  |
                  (NoDeclaration) {: RESULT=new NoDeclaration(); :} /* epsilon */
                  ;

Declaration ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
					|
					(VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
					|
					(ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :}
					|
					(EnumDeclaration) EnumDecl:E1 {: RESULT=new EnumDeclaration(E1); RESULT.setLine(E1left); :}
					|
					(InterfaceDeclaration) InterfaceDecl:I1 {: RESULT=new InterfaceDeclaration(I1); RESULT.setLine(I1left); :}
					; 

ConstDecl ::= (ConstDecl) CONST Type:t  IdentConst:I1 IdentConstList:I2 SEMI {: RESULT=new ConstDecl(t, I1, I2); RESULT.setLine(tleft); :};

IdentConst ::= (IdentConst) IDENT:name ASSIGN AnyConst:A1 {: RESULT=new IdentConst(name, A1); RESULT.setLine(nameleft); :};

IdentConstList ::= (IdentConstListRec) IdentConstList:I1 COMMA IdentConst:I2 {: RESULT=new IdentConstListRec(I1, I2); RESULT.setLine(I1left); :}
				| {: RESULT=new IdentConstListDerived1(); :}
				/* epsilon */
				;

AnyConst ::= (NumConst) NUM_CONST:numValue {: RESULT=new NumConst(numValue); RESULT.setLine(numValueleft); :}
			|
			(CharConst) CHAR_CONST:charValue {: RESULT=new CharConst(charValue); RESULT.setLine(charValueleft); :}
			|
			(BoolConst) BOOL_CONST:boolValue {: RESULT=new BoolConst(boolValue); RESULT.setLine(boolValueleft); :}
			;

EnumDecl ::= (EnumDecl) EnumName:name LBRACE EnumParam:E1 EnumParamList:E2 RBRACE {: RESULT=new EnumDecl(name, E1, E2); RESULT.setLine(nameleft); :};

EnumName ::= (EnumName) ENUM IDENT:enumName {: RESULT=new EnumName(enumName); RESULT.setLine(enumNameleft); :};

EnumParam ::= (EnumParam) IDENT:name MaybeAssignNumConst:M1 {: RESULT=new EnumParam(name, M1); RESULT.setLine(nameleft); :};

EnumParamList ::= (EnumParamsList) EnumParamList:E1 COMMA EnumParam:E2 {: RESULT=new EnumParamsList(E1, E2); RESULT.setLine(E1left); :}
                  |
                  (NoEnumParamsList) {: RESULT=new NoEnumParamsList(); :} /* epsilon */
                  ; 

MaybeAssignNumConst ::= (EnumAssignNumConst) ASSIGN NUM_CONST:value {: RESULT=new EnumAssignNumConst(value); RESULT.setLine(valueleft); :}
				              | {: RESULT=new MaybeAssignNumConstDerived1(); :}
				              /* epsilon */
				              ;

VarDecl ::= (VarDecl) Type:t VarName:name VarList:V1 SEMI {: RESULT=new VarDecl(t, name, V1); RESULT.setLine(tleft); :};

VarName ::= (VarName) IDENT:varName MaybeEmptySquareBrackets:M1 {: RESULT=new VarName(varName, M1); RESULT.setLine(varNameleft); :};

VarList ::= (VarListRec) VarList:V1 COMMA VarName:name {: RESULT=new VarListRec(V1, name); RESULT.setLine(V1left); :}
				| {: RESULT=new VarListDerived1(); :}
				/* epsilon */
				;

ClassDecl ::= (ClassDecl) CLASS IDENT:I1 MaybeExtends:M2 MaybeImplements:M3 LBRACE VarDeclList:V4 MaybeMethodDecl:M5 RBRACE {: RESULT=new ClassDecl(I1, M2, M3, V4, M5); RESULT.setLine(I1left); :};

MaybeMethodDecl ::= LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MaybeMethodDeclDerived1(M1); RESULT.setLine(M1left); :}
					| {: RESULT=new MaybeMethodDeclDerived2(); :}
					/* epsilon */
					;

MethodDeclList ::= (MethodDeclListRec) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListRec(M1, M2); RESULT.setLine(M1left); :}
					| {: RESULT=new MethodDeclListDerived1(); :}
					/* epsilon */
					;

MaybeImplements ::= IMPLEMENTS Type:t TypeList:T1 {: RESULT=new MaybeImplementsDerived1(t, T1); RESULT.setLine(tleft); :}
					| {: RESULT=new MaybeImplementsDerived2(); :}
					/* epsilon */
					;

TypeList ::= (TypeListRec) TypeList:T1 COMMA Type:t {: RESULT=new TypeListRec(T1, t); RESULT.setLine(T1left); :}
				| {: RESULT=new TypeListDerived1(); :}
				/* epsilon */
				;

MaybeExtends ::= EXTENDS Type:t {: RESULT=new MaybeExtendsDerived1(t); RESULT.setLine(tleft); :}
				| {: RESULT=new MaybeExtendsDerived2(); :}
				/* epsilon */
				;

InterfaceDecl ::= (InterfaceDecl) INTERFACE IDENT:I1 LBRACE InterfaceMethodDeclList:I2 RBRACE {: RESULT=new InterfaceDecl(I1, I2); RESULT.setLine(I1left); :};

InterfaceMethodDeclList ::= (InterfaceMethodDeclListRec) InterfaceMethodDeclList:I1 InterfaceMethodDecl:I2 {: RESULT=new InterfaceMethodDeclListRec(I1, I2); RESULT.setLine(I1left); :}
							| {: RESULT=new InterfaceMethodDeclListDerived1(); :}
							/* epsilon */
							;

InterfaceMethodDecl ::= (InterfaceMethodDecl) TypeOrVoid:T1 IDENT:I2 LPAREN MaybeFormPars:M3 RPAREN SEMI {: RESULT=new InterfaceMethodDecl(T1, I2, M3); RESULT.setLine(T1left); :};

MethodDecl ::= (MethodDecl) MethodName:M1 LPAREN MaybeFormPars:M2 RPAREN VarDeclList:V3 LBRACE MethodStart:M4 StatementList:S5 RBRACE {: RESULT=new MethodDecl(M1, M2, V3, M4, S5); RESULT.setLine(M1left); :};

MethodStart ::= (MethodStart) {: RESULT=new MethodStart(); :} /* epsilon */;

MethodName ::= (MethodName) TypeOrVoid:T1 IDENT:methodName {: RESULT=new MethodName(T1, methodName); RESULT.setLine(T1left); :};

TypeOrVoid ::= (SomeType) Type:typeName {: RESULT=new SomeType(typeName); RESULT.setLine(typeNameleft); :}
				      |
				      (VoidType) VOID {: RESULT=new VoidType(); :}
				      ; 

MaybeFormPars ::= (FormParams) FormPars:fp {: RESULT=new FormParams(fp); RESULT.setLine(fpleft); :} 
				      |
				      (NoFormParams) {: RESULT=new NoFormParams(); :} /* epsilon */
				      ;

VarDeclList ::= (VarDeclListRec) VarDeclList:V1 VarDecl:var {: RESULT=new VarDeclListRec(V1, var); RESULT.setLine(V1left); :}
				| {: RESULT=new VarDeclListDerived1(); :}
				/* epsilon */
				; 

FormPars ::= (FormPars) Type:t IDENT:I1 MaybeEmptySquareBrackets:M2 FormParsList:l {: RESULT=new FormPars(t, I1, M2, l); RESULT.setLine(tleft); :};

MaybeEmptySquareBrackets ::= (EmptySquareBrackets) LSQUAREB RSQUAREB {: RESULT=new EmptySquareBrackets(); :}
							|
							(NoSquareBrackets) {: RESULT=new NoSquareBrackets(); :} /* epsilon */
							;			

FormParsList ::= (FormParsListRec) FormParsList:F1 COMMA Type:t IDENT:I2 MaybeEmptySquareBrackets:M3 {: RESULT=new FormParsListRec(F1, t, I2, M3); RESULT.setLine(F1left); :}
				| {: RESULT=new FormParsListDerived1(); :}
				/* epsilon */
				;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
			  |
			  (UnmatchedStmt) Unmatched:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :}
			  ;

Unmatched ::= (UnmatchedIf) IF LPAREN Condition:cond RPAREN Statement:stmt {: RESULT=new UnmatchedIf(cond, stmt); RESULT.setLine(condleft); :}
			|
			(UnmatchedIfElse) IF LPAREN Condition:cond RPAREN Matched:M1 ELSE Unmatched:U2 {: RESULT=new UnmatchedIfElse(cond, M1, U2); RESULT.setLine(condleft); :};
	
Matched ::=
			(DesignStatement) DesignatorStatement:designatorStatement SEMI {: RESULT=new DesignStatement(designatorStatement); RESULT.setLine(designatorStatementleft); :}
			|
			(MatchedIf) IF LPAREN Condition:cond RPAREN Matched:M1 ELSE Matched:M2 {: RESULT=new MatchedIf(cond, M1, M2); RESULT.setLine(condleft); :}
			|
			(ForStatement) FOR LPAREN MaybeDesignatorStatement:M1 SEMI MaybeCondition:M2 SEMI MaybeDesignatorStatement:M3 RPAREN Matched:stmt {: RESULT=new ForStatement(M1, M2, M3, stmt); RESULT.setLine(M1left); :}
			|
			(Break) BREAK SEMI {: RESULT=new Break(); :}
			|
			(Continue) CONTINUE SEMI {: RESULT=new Continue(); :}
			|
			(ReturnStatement) RETURN ReturnExpression:R1 SEMI {: RESULT=new ReturnStatement(R1); RESULT.setLine(R1left); :}
			|
			(ReadDesignatorStatement) READ LPAREN Designator:designator RPAREN SEMI {: RESULT=new ReadDesignatorStatement(designator); RESULT.setLine(designatorleft); :}
			|
			(PrintStatement) PRINT LPAREN Expr:expr MaybeNumConst:M1 RPAREN SEMI {: RESULT=new PrintStatement(expr, M1); RESULT.setLine(exprleft); :}
			|
			(StatementBody) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementBody(S1); RESULT.setLine(S1left); :}
			;
			
StatementList ::= (StatementListRec) StatementList:S1 Statement:stmt {: RESULT=new StatementListRec(S1, stmt); RESULT.setLine(S1left); :}
				| {: RESULT=new StatementListDerived1(); :}
				/* epsilon */
				;
			
MaybeNumConst ::= COMMA NUM_CONST:N1 {: RESULT=new MaybeNumConstDerived1(N1); RESULT.setLine(N1left); :}
				| {: RESULT=new MaybeNumConstDerived2(); :}
				/* epsilon */
				;			

ReturnExpression ::= (ReturnExpressionE) Expr:e {: RESULT=new ReturnExpressionE(e); RESULT.setLine(eleft); :}
					         |
					         (NoReturnExpression) {: RESULT=new NoReturnExpression(); :} /* epsilon */
					         ;
					 
			
MaybeCondition ::= Condition:cond {: RESULT=new MaybeConditionDerived1(cond); RESULT.setLine(condleft); :}
					| {: RESULT=new MaybeConditionDerived2(); :}
					/* epsilon */
					;
			
MaybeDesignatorStatement ::= DesignatorStatement:stmt {: RESULT=new MaybeDesignatorStatementDerived1(stmt); RESULT.setLine(stmtleft); :}
							| {: RESULT=new MaybeDesignatorStatementDerived2(); :}
							/* epsilon */
							;			

DesignatorStatement ::= (DesignatorExpr) Designator:d Assignop:A1 Expr:e {: RESULT=new DesignatorExpr(d, A1, e); RESULT.setLine(dleft); :}
						|
						(DesignatorParams) Designator:d LPAREN MaybeActualParams:M1 RPAREN {: RESULT=new DesignatorParams(d, M1); RESULT.setLine(dleft); :}
						|
						(DesignatorInc) Designator:d INC {: RESULT=new DesignatorInc(d); RESULT.setLine(dleft); :}
						|
						(DesignatorDec) Designator:d DEC {: RESULT=new DesignatorDec(d); RESULT.setLine(dleft); :}
						;

ActPars ::= (ActPars) Expr:e ActParList:A1 {: RESULT=new ActPars(e, A1); RESULT.setLine(eleft); :};

ActParList ::= (ActParListRec) ActParList:A1 COMMA Expr:e {: RESULT=new ActParListRec(A1, e); RESULT.setLine(A1left); :}
				| {: RESULT=new ActParListDerived1(); :}
				/* epsilon */
				;
				
Condition ::= (Condition) CondTerm:ct CondTermOr:C1 {: RESULT=new Condition(ct, C1); RESULT.setLine(ctleft); :};

CondTermOr ::= (CondTermOrRec) CondTermOr:C1 OR CondTerm:C2 {: RESULT=new CondTermOrRec(C1, C2); RESULT.setLine(C1left); :}
				| {: RESULT=new CondTermOrDerived1(); :}
				/* epsilon */
				;

CondTerm ::= (CondTerm) CondFact:cf CondFactAnd:C1 {: RESULT=new CondTerm(cf, C1); RESULT.setLine(cfleft); :};

CondFactAnd ::= (CondFactAndRec) CondFactAnd:C1 AND CondFact:C2 {: RESULT=new CondFactAndRec(C1, C2); RESULT.setLine(C1left); :}
				| {: RESULT=new CondFactAndDerived1(); :}
				/* epsilon */
				;

CondFact ::= (CondFact) Expr:e MaybeRelopExpr:M1 {: RESULT=new CondFact(e, M1); RESULT.setLine(eleft); :}; 
			
MaybeRelopExpr ::= Relop:R1 Expr:e {: RESULT=new MaybeRelopExprDerived1(R1, e); RESULT.setLine(R1left); :}
				| {: RESULT=new MaybeRelopExprDerived2(); :}
				/* epsilon */
				;
				
Expr ::= (Expr) MaybeMinus:M1 Term:t AddopTermList:A2 {: RESULT=new Expr(M1, t, A2); RESULT.setLine(M1left); :};

MaybeMinus ::=  MINUS {: RESULT=new MaybeMinusDerived1(); :}
				| {: RESULT=new MaybeMinusDerived2(); :}
				/* epsilon */
				;

AddopTermList ::= (AddopTermListRec) AddopTermList:A1 Addop:A2 Term:t {: RESULT=new AddopTermListRec(A1, A2, t); RESULT.setLine(A1left); :}
				| {: RESULT=new AddopTermListDerived1(); :}
				/* epsilon */
				;

Term ::= (Term) Factor:f MulopFactorList:M1 {: RESULT=new Term(f, M1); RESULT.setLine(fleft); :};

MulopFactorList ::= (MulopFactorListRec) MulopFactorList:M1 Mulop:M2 Factor:f {: RESULT=new MulopFactorListRec(M1, M2, f); RESULT.setLine(M1left); :} 
				| {: RESULT=new MulopFactorListDerived1(); :}
				/* epsilon */
				;

Factor ::= (FactorDesignator) Designator:d MaybeParams:M1 {: RESULT=new FactorDesignator(d, M1); RESULT.setLine(dleft); :}
		|
		(FactorNumber) NUM_CONST:N1 {: RESULT=new FactorNumber(N1); RESULT.setLine(N1left); :}
		|
		(FactorChar) CHAR_CONST:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		|
		(FactorBool) BOOL_CONST:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		|
		(FactorNewType) NEW Type:type MaybeExpression:M1 {: RESULT=new FactorNewType(type, M1); RESULT.setLine(typeleft); :}
		|
		(FactorExpression) LPAREN Expr:e RPAREN {: RESULT=new FactorExpression(e); RESULT.setLine(eleft); :}
		;

MaybeParams ::= (ActualParamsBrackets) LPAREN MaybeActualParams:params RPAREN {: RESULT=new ActualParamsBrackets(params); RESULT.setLine(paramsleft); :}
				      | {: RESULT=new MaybeParamsDerived1(); :}
				      /* epsilon */
				      ;
				
MaybeActualParams ::= (ActualParams) ActPars:params {: RESULT=new ActualParams(params); RESULT.setLine(paramsleft); :}
						| {: RESULT=new MaybeActualParamsDerived1(); :}
						/* epsilon */
						;
				
MaybeExpression ::= LSQUAREB Expr:e RSQUAREB {: RESULT=new MaybeExpressionDerived1(e); RESULT.setLine(eleft); :}
					| {: RESULT=new MaybeExpressionDerived2(); :}
					/* epsilon */
					;

Designator ::= (DesignatorRefMember) Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorRefMember(D1, I2); RESULT.setLine(D1left); :}
				|
				(DesignatorArrayMember) Designator:D1 LSQUAREB Expr:e RSQUAREB {: RESULT=new DesignatorArrayMember(D1, e); RESULT.setLine(D1left); :}
				|
				(DesignatorIdent) IDENT:name {: RESULT=new DesignatorIdent(name); RESULT.setLine(nameleft); :}
				;

Assignop ::= (Assign) ASSIGN {: RESULT=new Assign(); :};

Relop ::= (Equal) EQUAL {: RESULT=new Equal(); :}
		|
		(NotEqual) NEQUAL {: RESULT=new NotEqual(); :}
		|
		(Greater) GREATER {: RESULT=new Greater(); :}
		|
		(GreaterOrEqual) GREATERE {: RESULT=new GreaterOrEqual(); :}
		|
		(Lesser) LESSER {: RESULT=new Lesser(); :}
		|
		(LesserOrEqual) LESSERE {: RESULT=new LesserOrEqual(); :}
		;

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :} 
		|
		(Minus) MINUS {: RESULT=new Minus(); :}
		;

Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
		|
		(Div) DIV {: RESULT=new Div(); :}
		|
		(Mod) MOD {: RESULT=new Mod(); :}
		;
		